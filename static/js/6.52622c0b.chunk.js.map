{"version":3,"sources":["components/common/checkbox-group/CheckboxGroup.tsx","components/common/data-table/data-table-header/DataTableHeader.tsx","components/common/chip/Chip.tsx","components/common/data-table/data-table-row/DataTableRow.tsx","components/common/data-table/DataTable.tsx","components/salary-analytics/salary-comparison-table/SalaryComparisonTable.tsx"],"names":["useStyles","makeStyles","root","display","justifyContent","classNamePrefix","CheckboxGroup","groupLabel","checkboxes","changeHandler","classes","className","FormControl","component","FormLabel","FormGroup","map","checkbox","index","FormControlLabel","control","Checkbox","checked","onChange","name","label","breakpoints","createBreakpoints","gridTemplateColumns","position","textAlign","width","height","alignItems","backgroundColor","color","fontSize","letterSpacing","filterButton","right","down","popoverContent","padding","DataTableHeader","columns","filters","useState","anchorEl","setAnchorEl","isPopoverOpened","Boolean","id","undefined","data-test-id","column","title","IconButton","onClick","event","currentTarget","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","justifySelf","borderRadius","lineHeight","Chip","style","border","total","fontWeight","DataTableRow","rowValues","highlightTotalColumn","DataTable","columnsNames","value","SalaryComparisonTable","mappedRowValues","setMappedRowValues","useEffect","DeltaChipsColors","adaptedDataTableValues","salaryData","location","salary","toLocaleString","currency","maximumFractionDigits","delta","positive","negative","zero","getAdaptedDataTableValues"],"mappings":"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","file":"static/js/6.52622c0b.chunk.js","sourcesContent":["import { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\nimport { CheckboxGroupProperties, CheckboxProperties } from \"../interfaces\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    }\r\n}, { classNamePrefix: \"checkbox-group\"});\r\n\r\nexport const CheckboxGroup = ({ groupLabel, checkboxes, changeHandler }: CheckboxGroupProperties): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\" className=\"Mui-focused\">{groupLabel}</FormLabel>\r\n                <FormGroup>\r\n                    {\r\n                        checkboxes.map((checkbox: CheckboxProperties, index: number) => \r\n                            <FormControlLabel\r\n                                control={<Checkbox checked={checkbox.checked} onChange={changeHandler} name={checkbox.label} />}\r\n                                label={checkbox.label}\r\n                                key={index}\r\n                            />\r\n                        )\r\n                    }\r\n                </FormGroup>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CheckboxGroup;","import { makeStyles } from \"@material-ui/styles\";\r\nimport React, { useState } from \"react\";\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport { CheckboxGroupProperties } from \"../../interfaces\";\r\nimport { IconButton, Popover } from \"@material-ui/core\";\r\nimport CheckboxGroup from \"../../checkbox-group/CheckboxGroup\";\r\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\r\n\r\nexport interface DataTableHeaderProps {\r\n    columns: string[];\r\n    filters: CheckboxGroupProperties;\r\n}\r\n\r\nconst breakpoints = createBreakpoints({});\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(auto-fit, minmax(100px, 1fr))\",\r\n        position: \"relative\",\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n        height: \"70px\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#04a599\",\r\n        color: \"#fafafa\",\r\n    },\r\n    label: {\r\n        fontSize: \"1.2em\",\r\n        letterSpacing: \"0.03em\"\r\n    },\r\n    filterButton: {\r\n        position: \"absolute\",\r\n        right: \"20px\",\r\n        [breakpoints.down(\"xs\")]: {\r\n            right: 0\r\n        }\r\n    },\r\n    popoverContent: {\r\n        padding: \"10px\"\r\n    }\r\n}, { classNamePrefix: \"data-table-header\" });\r\n\r\nexport const DataTableHeader = ({ columns, filters }: DataTableHeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n\r\n    const handleFilterClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handlePopoverClose = (): void => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const isPopoverOpened = Boolean(anchorEl);\r\n    const id = isPopoverOpened ? 'simple-popover' : undefined;\r\n\r\n    return (\r\n        <div className={classes.root} data-test-id=\"header\">\r\n            {\r\n                columns.map((column: string, index: number) =>\r\n                    <p key={index} className={classes.label} title={column} data-test-id=\"column\">{column}</p>\r\n                )\r\n            }\r\n\r\n            <IconButton className={classes.filterButton} onClick={handleFilterClick} data-test-id=\"filters-button\">\r\n                <FilterListIcon />\r\n            </IconButton>\r\n\r\n            <Popover\r\n                id={id}\r\n                open={isPopoverOpened}\r\n                anchorEl={anchorEl}\r\n                onClose={handlePopoverClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}>\r\n                <div className={classes.popoverContent}>\r\n                    <CheckboxGroup groupLabel={filters.groupLabel}\r\n                        checkboxes={filters.checkboxes}\r\n                        changeHandler={filters.changeHandler}\r\n                    />\r\n                </div>\r\n            </Popover>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DataTableHeader;","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { ChipProperties } from './../interfaces';\r\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\r\n\r\nconst breakpoints = createBreakpoints({});\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        justifySelf: \"center\",\r\n        height: \"45px\",\r\n        borderRadius: \"30px\",\r\n        width: \"150px\",\r\n        [breakpoints.down(\"sm\")]: {\r\n            width: \"100px\"\r\n        }\r\n    },\r\n    label: {\r\n        lineHeight: \"45px\",\r\n        fontSize: \"1.15em\"\r\n    }\r\n}, { classNamePrefix: \"chip\"});\r\n\r\nexport const Chip = ({ label, color }: ChipProperties): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root} style={{ backgroundColor: color }} data-test-id=\"chip\">\r\n            <p className={classes.label}>{label}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Chip;","import { makeStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\nimport Chip from \"../../chip/Chip\";\r\nimport { DataTableRowValue } from \"../../interfaces\";\r\nimport { ChipProperties } from './../../interfaces';\r\n\r\nexport interface DataTableRowProps {\r\n    rowValues: DataTableRowValue[];\r\n    highlightTotalColumn?: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(auto-fit, minmax(100px, 1fr))\",\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n        height: \"100px\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#fafafa\",\r\n        color: \"#2d333b\",\r\n        border: \"1px solid #e1e4e8\"\r\n    },\r\n    label: { \r\n        fontSize: \"1.15em\",\r\n        letterSpacing: \"0.03em\"\r\n    },\r\n    total: {\r\n        \"&:last-child > p:first-child\": {\r\n            fontWeight: 600\r\n        }\r\n    }\r\n}, { classNamePrefix: \"data-table-row\" });\r\n\r\nexport const DataTableRow = ({ rowValues, highlightTotalColumn = true }: DataTableRowProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    \r\n    const isChipValue = (value: DataTableRowValue): value is ChipProperties => {\r\n        return (value as ChipProperties).color !== undefined;\r\n    }\r\n\r\n    return (\r\n        <div className={`${classes.root} ${highlightTotalColumn ? classes.total : \"\"}`} data-test-id=\"row\">\r\n            {\r\n                rowValues.map((column: DataTableRowValue, index: number) => \r\n                    {\r\n                        return isChipValue(column) ? \r\n                            <Chip key={index} label={column.label} color={column.color}/> :\r\n                            <p key={index} className={classes.label}>{column}</p>\r\n                    }\r\n                )\r\n            }\r\n        </div> \r\n    )\r\n};\r\n\r\nexport default DataTableRow;","import React from \"react\";\r\nimport { CheckboxGroupProperties, DataTableRowValue } from \"../interfaces\";\r\nimport DataTableHeader from \"./data-table-header/DataTableHeader\";\r\nimport DataTableRow from \"./data-table-row/DataTableRow\";\r\n\r\nexport interface DataTableProps {\r\n    columnsNames: string[];\r\n    rowValues: DataTableRowValue[][];\r\n    filters: CheckboxGroupProperties;\r\n}\r\n\r\nexport const DataTable = ({ columnsNames, rowValues, filters }: DataTableProps): JSX.Element => {\r\n\r\n    return (\r\n        <>\r\n            <DataTableHeader columns={columnsNames} filters={filters}/>\r\n            <div>\r\n                {\r\n                    rowValues.map((value: DataTableRowValue[], index: number) => \r\n                        <DataTableRow key={index} rowValues={value}/>\r\n                    )\r\n                }             \r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default DataTable;","import React, { useEffect, useState } from \"react\";\r\nimport DataTable from \"../../common/data-table/DataTable\";\r\nimport { CheckboxGroupProperties, DataTableRowValue } from \"../../common/interfaces\";\r\nimport { SalaryComparisonData } from \"../interfaces\";\r\n\r\nexport interface SalaryComparisonTableProps {\r\n    columnsNames: string[];\r\n    rowValues: SalaryComparisonData[];\r\n    filters: CheckboxGroupProperties;\r\n}\r\n\r\nexport const SalaryComparisonTable = ({ columnsNames, rowValues, filters }: SalaryComparisonTableProps): JSX.Element => {\r\n    const [mappedRowValues, setMappedRowValues] = useState<DataTableRowValue[][]>([]);\r\n\r\n    useEffect((): void => {\r\n\r\n        enum DeltaChipsColors {\r\n            \"positive\" = \"#adff2e\",\r\n            \"negative\" = \"#ffa500\",\r\n            \"zero\" = \"#ffff00\"\r\n        };\r\n\r\n        const getChipColor = (delta: number): DeltaChipsColors => {\r\n            if (delta > 0) {\r\n                return DeltaChipsColors.positive;\r\n            } else if (delta < 0) {\r\n                return DeltaChipsColors.negative;\r\n            } else {\r\n                return DeltaChipsColors.zero;\r\n            }\r\n        }\r\n\r\n        const getAdaptedDataTableValues = (rowValues: SalaryComparisonData[]): DataTableRowValue[][] => rowValues.map((salaryData: SalaryComparisonData) => {\r\n            return [\r\n                salaryData.location,\r\n                `${salaryData.salary.toLocaleString(undefined, { style: \"currency\", currency: \"USD\", maximumFractionDigits: 2 })}`,\r\n                { label: `${salaryData.delta >= 0 ? \"+\" : \"\"}${salaryData.delta}%`, color: `${getChipColor(salaryData.delta)}` }\r\n            ]\r\n        });\r\n\r\n        const adaptedDataTableValues = getAdaptedDataTableValues(rowValues);\r\n        setMappedRowValues(adaptedDataTableValues);\r\n    }, [rowValues]);\r\n\r\n    return (\r\n        <DataTable columnsNames={columnsNames} rowValues={mappedRowValues} filters={filters}/>\r\n    )\r\n};\r\n\r\nexport default SalaryComparisonTable;"],"sourceRoot":""}