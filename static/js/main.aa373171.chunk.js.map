{"version":3,"sources":["components/common/loader/Loader.tsx","components/salary-analytics/helpers.ts","components/salary-analytics/SalaryAnalytics.tsx","api/SalaryAnalyticsApi.ts","App.tsx","index.js"],"names":["Spinner","xmlns","preserveAspectRatio","viewBox","style","background","cx","cy","r","fill","stroke","strokeDasharray","strokeWidth","transform","attributeName","begin","calcMode","dur","keyTimes","repeatCount","type","values","useStyles","makeStyles","root","position","top","right","left","bottom","zIndex","opacity","visibility","backgroundColor","img","display","width","label","textAlign","classNamePrefix","Loader","loadingLabel","classes","className","getDataForTotalColumn","array","pointer","map","value","reduce","accumulator","currentValue","length","getAveragesByCountry","shownData","averageData","Object","entries","forEach","country","employeeData","averageDataByCountry","aggregatedEmployeeData","employeesAmount","salary","delta","parseFloat","toFixed","location","calculateAverageValues","result","parsedCurrentSalary","currSalary","substring","parsedPreviousSalary","prevSalary","push","SalaryAnalytics","useState","rawEmployeeData","setRawEmployeeData","employeeDataByCountry","setEmployeeDataByCountry","aggregatedEmployeeDataByCountry","setAggregatedEmployeeDataByCountry","groupLabel","checkboxes","changeHandler","event","onFilterChange","filters","setFilters","isDataLoaded","setIsDataLoaded","currentTabIndex","setCurrentTabIndex","isInitialMount","useRef","filtersRef","TableComponent","useMemo","lazy","ChartComponent","allCountriesLabel","indexOfChangedFilter","current","findIndex","checkbox","target","name","newCheckboxes","checked","every","useEffect","Promise","resolve","reject","setTimeout","employeeDataset","then","salaryData","key","keys","unshift","totalColumnData","currentlySelectedCountries","filter","activeCheckbox","includes","rawData","fromEntries","filterSelectedCountries","Tabs","onChange","newValue","indicatorColor","textColor","centered","Tab","fallback","columnsNames","rowValues","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa373171.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      preserveAspectRatio=\"xMidYMid\"\r\n      viewBox=\"0 0 100 100\"\r\n      style={{ background: \"none\" }}\r\n    >\r\n      <circle\r\n        cx=\"50\"\r\n        cy=\"50\"\r\n        r=\"35\"\r\n        fill=\"none\"\r\n        stroke=\"#435af5\"\r\n        strokeDasharray=\"164.93361431346415 56.97787143782138\"\r\n        strokeWidth=\"8\"\r\n        transform=\"rotate(125.808 50 50)\"\r\n      >\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          begin=\"0s\"\r\n          calcMode=\"linear\"\r\n          dur=\"1s\"\r\n          keyTimes=\"0;1\"\r\n          repeatCount=\"indefinite\"\r\n          type=\"rotate\"\r\n          values=\"0 50 50;360 50 50\"\r\n        ></animateTransform>\r\n      </circle>\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        right: 0,\r\n        left: 0,\r\n        bottom: 0,\r\n        zIndex: 5000,\r\n        opacity: 1,\r\n        visibility: \"visible\",\r\n        backgroundColor: \"rgba(#F9FAFC, .7)\"\r\n    },\r\n    img: { \r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        display: \"block\",\r\n        width: \"100px\"\r\n    },\r\n    label: {\r\n        textAlign: \"center\"\r\n    }\r\n}, { classNamePrefix: \"spinner\" });\r\n\r\nexport interface LoaderProps {\r\n    loadingLabel: string;\r\n}\r\n\r\nexport const Loader = ({loadingLabel}: LoaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.img}>\r\n                <Spinner/>\r\n                <p className={classes.label}>{loadingLabel}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import { EmployeeData, EmployeeDataByCountry, SalaryComparisonData } from \"./interfaces\";\r\n\r\nexport const groupEmployeesByCountry = (array: EmployeeData[], key: string): EmployeeDataByCountry => {\r\n    return array.reduce((result: any, currentValue: any) => {\r\n      (result[currentValue[key]] = result[currentValue[key]] || []).push(currentValue);\r\n\r\n      return result;\r\n    }, {});\r\n};\r\n\r\nexport const getDataForTotalColumn = (array: any[], pointer: string): number => {\r\n    return array\r\n        .map(value => value[pointer])\r\n        .reduce((accumulator, currentValue) => accumulator + currentValue) / array.length;\r\n};\r\n\r\nexport const filterSelectedCountries = (rawData: EmployeeDataByCountry, filters: string[]): EmployeeDataByCountry => {\r\n    return Object.fromEntries(Object.entries(rawData)\r\n        .filter(([key]) => filters.includes(key)));\r\n};\r\n\r\nexport const getAveragesByCountry = (shownData: EmployeeDataByCountry): SalaryComparisonData[] => {\r\n    let averageData: SalaryComparisonData[] = [];\r\n\r\n    const calculateAverageValues = (aggregatedEmployeeData: SalaryComparisonData, employeesAmount: number): SalaryComparisonData => {\r\n        return {\r\n            salary: aggregatedEmployeeData.salary / employeesAmount,\r\n            delta: parseFloat((aggregatedEmployeeData.delta / employeesAmount).toFixed(2)),\r\n            location: aggregatedEmployeeData.location\r\n        };\r\n    };\r\n\r\n    Object.entries(shownData).forEach(([country, employeeData]: [string, EmployeeData[]]) => {\r\n        const aggregatedEmployeeData = employeeData.reduce((result: SalaryComparisonData, currentValue: EmployeeData) => {\r\n            const parsedCurrentSalary = parseFloat(currentValue.currSalary.substring(1));\r\n            const parsedPreviousSalary = parseFloat(currentValue.prevSalary.substring(1));\r\n            result.salary += parsedCurrentSalary;\r\n            result.delta += ((parsedPreviousSalary / parsedCurrentSalary) * 100) - 100;\r\n\r\n            return result;\r\n        }, { location: country, salary: 0, delta: 0 } as SalaryComparisonData);\r\n        const averageDataByCountry = calculateAverageValues(aggregatedEmployeeData, employeeData.length);\r\n\r\n        averageData.push(averageDataByCountry);\r\n    });\r\n\r\n    return averageData;\r\n}","import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, lazy, Suspense, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { getEmployeeSalaryData } from \"../../api/SalaryAnalyticsApi\";\r\nimport { CheckboxGroupProperties } from \"../common/interfaces\";\r\nimport { Loader } from \"../common/loader/Loader\";\r\nimport { filterSelectedCountries, getAveragesByCountry, getDataForTotalColumn, groupEmployeesByCountry } from \"./helpers\";\r\nimport { EmployeeDataByCountry, EmployeeData, SalaryComparisonData } from \"./interfaces\";\r\n\r\nexport const SalaryAnalytics = (): JSX.Element => {\r\n    const [rawEmployeeData, setRawEmployeeData] = useState<EmployeeData[]>([]);\r\n    const [employeeDataByCountry, setEmployeeDataByCountry] = useState<EmployeeDataByCountry>({});\r\n    const [aggregatedEmployeeDataByCountry, setAggregatedEmployeeDataByCountry] = useState<SalaryComparisonData[]>([]);\r\n    const [filters, setFilters] = useState<CheckboxGroupProperties>({ groupLabel: \"Countries\", checkboxes: [], changeHandler: (event) => onFilterChange(event)});\r\n    const [isDataLoaded, setIsDataLoaded] = useState<boolean>(false);\r\n    const [currentTabIndex, setCurrentTabIndex] = useState(0);\r\n    const isInitialMount = useRef(true);\r\n    const filtersRef = useRef(filters);\r\n\r\n    const TableComponent = useMemo(() => lazy(() => import(\"./salary-comparison-table/SalaryComparisonTable\")), []);\r\n    const ChartComponent = useMemo(() => lazy(() => import(\"./salary-comparison-chart/SalaryComparisonChart\")), []);\r\n\r\n    const allCountriesLabel = \"All countries\";\r\n    const allCountriesCheckboxIndex = 0;\r\n\r\n\tconst tabIndexes = {\r\n\t\tsalaryTableAnalytics: 0,\r\n\t\tsalaryChartAnalytics: 1\r\n\t};\r\n\r\n    const onTabChange = (event: ChangeEvent<{}>, newValue: number) => {\r\n\t\tsetCurrentTabIndex(newValue);\r\n\t};\r\n\r\n    const onFilterChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        const indexOfChangedFilter = filtersRef.current.checkboxes.findIndex((checkbox) => checkbox.label === event.target.name);\r\n        const newCheckboxes = [...filtersRef.current.checkboxes];\r\n        newCheckboxes[indexOfChangedFilter].checked = !newCheckboxes[indexOfChangedFilter].checked;\r\n        if (event.target.name === allCountriesLabel) {\r\n            newCheckboxes.forEach(checkbox => checkbox.checked = false);\r\n            newCheckboxes[allCountriesCheckboxIndex].checked = true;\r\n        } else {\r\n            newCheckboxes[allCountriesCheckboxIndex].checked = newCheckboxes.every(checkbox => !checkbox.checked);\r\n        }\r\n        setFilters({...filtersRef.current, checkboxes: newCheckboxes }); \r\n    }\r\n\r\n    useEffect((): void => {\r\n        getEmployeeSalaryData().then(salaryData => {\r\n            setRawEmployeeData(salaryData as EmployeeData[]);\r\n            setIsDataLoaded(true);\r\n        });\r\n    }, []);\r\n\r\n    useEffect((): void => {\r\n        if (rawEmployeeData.length) {\r\n            const employeeDataByCountry = groupEmployeesByCountry(rawEmployeeData, \"location\");\r\n            const checkboxes = Object.keys(employeeDataByCountry).map((country: string) => {\r\n                return {\r\n                    checked: false,\r\n                    label: country\r\n                }\r\n            });\r\n            checkboxes.unshift({ checked: true, label: allCountriesLabel });\r\n\r\n            setFilters((filters) => ({...filters, checkboxes: checkboxes}));\r\n            setEmployeeDataByCountry(employeeDataByCountry);\r\n        }\r\n    }, [rawEmployeeData]);\r\n\r\n    useEffect((): void => {\r\n        filtersRef.current = filters;\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n        } else {\r\n            let totalColumnData: SalaryComparisonData = { location: \"Total\", salary: 0, delta: 0 };\r\n            const currentlySelectedCountries = filters.checkboxes\r\n                .filter(checkbox => checkbox.checked)\r\n                .map(activeCheckbox => activeCheckbox.label);\r\n            const shownData: EmployeeDataByCountry = currentlySelectedCountries.includes(allCountriesLabel) \r\n                ? employeeDataByCountry \r\n                : filterSelectedCountries(employeeDataByCountry, currentlySelectedCountries);\r\n\r\n            const averageData = getAveragesByCountry(shownData);\r\n\r\n            totalColumnData.salary = getDataForTotalColumn(averageData, \"salary\");\r\n            totalColumnData.delta = parseFloat(getDataForTotalColumn(averageData, \"delta\").toFixed(2));\r\n\r\n            averageData.push(totalColumnData);\r\n\r\n            setAggregatedEmployeeDataByCountry(averageData);\r\n        }\r\n    }, [filters, employeeDataByCountry]);\r\n\r\n    return (\r\n        <>\r\n            <Tabs\r\n\t\t\t\tvalue={currentTabIndex}\r\n\t\t\t\tonChange={onTabChange}\r\n\t\t\t\tindicatorColor=\"primary\"\r\n\t\t\t\ttextColor=\"primary\"\r\n\t\t\t\tcentered\r\n\t\t\t>\r\n\t\t\t\t<Tab label=\"Table\" />\r\n\t\t\t\t<Tab label=\"Chart\" />\r\n\t\t\t</Tabs>\r\n            <Suspense fallback={Loader({ loadingLabel: \"Loading...\" })}>\r\n                {\r\n                    isDataLoaded ?\r\n                            currentTabIndex === tabIndexes.salaryTableAnalytics ? \r\n                                <TableComponent columnsNames={[\"Location\", \"Salary\", \"Delta\"]} rowValues={aggregatedEmployeeDataByCountry} filters={filters}/> :\r\n                                <ChartComponent columnsNames={[\"Bar chart\"]}\r\n                                    rowValues={aggregatedEmployeeDataByCountry.map(({ location, salary }) => ({location, salary}))} \r\n                                    filters={filters}/>\r\n                        : <Loader loadingLabel={\"Fetching...\"}/>\r\n                }\r\n\t\t\t\r\n            </Suspense>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SalaryAnalytics;","import employeeDataset from \"../stubs/EmployeeDataset.json\";\r\n\r\nexport const getEmployeeSalaryData = () => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve(employeeDataset);\r\n        }, 2000)\r\n    }\r\n)};","import React from 'react';\r\nimport SalaryAnalytics from './components/salary-analytics/SalaryAnalytics';\r\n\r\nfunction App() {\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<SalaryAnalytics/>\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}