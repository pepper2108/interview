{"version":3,"sources":["components/common/checkbox-group/CheckboxGroup.tsx","components/common/data-table/data-table-header/DataTableHeader.tsx","components/salary-analytics/salary-comparison-chart/SalaryComparisonChart.tsx"],"names":["useStyles","makeStyles","root","display","justifyContent","classNamePrefix","CheckboxGroup","groupLabel","checkboxes","changeHandler","classes","className","FormControl","component","FormLabel","FormGroup","map","checkbox","index","FormControlLabel","control","Checkbox","checked","onChange","name","label","breakpoints","createBreakpoints","gridTemplateColumns","position","textAlign","width","height","alignItems","backgroundColor","color","fontSize","letterSpacing","filterButton","right","down","popoverContent","padding","DataTableHeader","columns","filters","useState","anchorEl","setAnchorEl","isPopoverOpened","Boolean","id","undefined","data-test-id","column","title","IconButton","onClick","event","currentTarget","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","paddingBottom","overflow","tooltip","whiteSpace","maxWidth","theme","fontFamily","axis","lineHeight","textColor","ticks","line","stroke","text","fill","legend","grid","strokeWidth","SalaryComparisonChart","columnsNames","rowValues","data","keys","indexBy","margin","top","isMobile","bottom","left","colors","scheme","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","format","value","substring","enableLabel","axisLeft","animate","labelFormat","toLocaleString","style","currency","maximumFractionDigits","slice","isTooltipOfTotalColumn","indexValue","tooltipText"],"mappings":"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","file":"static/js/5.6527d1cf.chunk.js","sourcesContent":["import { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\nimport { CheckboxGroupProperties, CheckboxProperties } from \"../interfaces\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    }\r\n}, { classNamePrefix: \"checkbox-group\"});\r\n\r\nexport const CheckboxGroup = ({ groupLabel, checkboxes, changeHandler }: CheckboxGroupProperties): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\" className=\"Mui-focused\">{groupLabel}</FormLabel>\r\n                <FormGroup>\r\n                    {\r\n                        checkboxes.map((checkbox: CheckboxProperties, index: number) => \r\n                            <FormControlLabel\r\n                                control={<Checkbox checked={checkbox.checked} onChange={changeHandler} name={checkbox.label} />}\r\n                                label={checkbox.label}\r\n                                key={index}\r\n                            />\r\n                        )\r\n                    }\r\n                </FormGroup>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CheckboxGroup;","import { makeStyles } from \"@material-ui/styles\";\r\nimport React, { useState } from \"react\";\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport { CheckboxGroupProperties } from \"../../interfaces\";\r\nimport { IconButton, Popover } from \"@material-ui/core\";\r\nimport CheckboxGroup from \"../../checkbox-group/CheckboxGroup\";\r\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\r\n\r\nexport interface DataTableHeaderProps {\r\n    columns: string[];\r\n    filters: CheckboxGroupProperties;\r\n}\r\n\r\nconst breakpoints = createBreakpoints({});\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(auto-fit, minmax(100px, 1fr))\",\r\n        position: \"relative\",\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n        height: \"70px\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#04a599\",\r\n        color: \"#fafafa\",\r\n    },\r\n    label: {\r\n        fontSize: \"1.2em\",\r\n        letterSpacing: \"0.03em\"\r\n    },\r\n    filterButton: {\r\n        position: \"absolute\",\r\n        right: \"20px\",\r\n        [breakpoints.down(\"xs\")]: {\r\n            right: 0\r\n        }\r\n    },\r\n    popoverContent: {\r\n        padding: \"10px\"\r\n    }\r\n}, { classNamePrefix: \"data-table-header\" });\r\n\r\nexport const DataTableHeader = ({ columns, filters }: DataTableHeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n\r\n    const handleFilterClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handlePopoverClose = (): void => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const isPopoverOpened = Boolean(anchorEl);\r\n    const id = isPopoverOpened ? 'simple-popover' : undefined;\r\n\r\n    return (\r\n        <div className={classes.root} data-test-id=\"header\">\r\n            {\r\n                columns.map((column: string, index: number) =>\r\n                    <p key={index} className={classes.label} title={column} data-test-id=\"column\">{column}</p>\r\n                )\r\n            }\r\n\r\n            <IconButton className={classes.filterButton} onClick={handleFilterClick} data-test-id=\"filters-button\">\r\n                <FilterListIcon />\r\n            </IconButton>\r\n\r\n            <Popover\r\n                id={id}\r\n                open={isPopoverOpened}\r\n                anchorEl={anchorEl}\r\n                onClose={handlePopoverClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}>\r\n                <div className={classes.popoverContent}>\r\n                    <CheckboxGroup groupLabel={filters.groupLabel}\r\n                        checkboxes={filters.checkboxes}\r\n                        changeHandler={filters.changeHandler}\r\n                    />\r\n                </div>\r\n            </Popover>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DataTableHeader;","import { makeStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\nimport { CheckboxGroupProperties } from \"../../common/interfaces\";\r\nimport { SalaryComparisonData } from \"../interfaces\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport DataTableHeader from \"../../common/data-table/data-table-header/DataTableHeader\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\r\n\r\nexport interface SalaryComparisonChartProps {\r\n    columnsNames: string[];\r\n    rowValues: Pick<SalaryComparisonData, \"location\" | \"salary\">[];\r\n    filters: CheckboxGroupProperties;\r\n}\r\n\r\nconst breakpoints = createBreakpoints({});\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: \"900px\",\r\n        paddingBottom: \"50px\",\r\n        overflow: \"hidden\",\r\n        [breakpoints.down(\"xs\")]: {\r\n            height: \"700px\"\r\n        }\r\n    },\r\n    tooltip: {\r\n        whiteSpace: \"break-spaces\",\r\n        [breakpoints.down(\"xs\")]: {\r\n            maxWidth: \"80px\"\r\n        }\r\n    }\r\n}, { classNamePrefix: \"salary-chart\" });\r\n\r\nconst theme = {\r\n    fontSize: \"18px\",\r\n    fontFamily: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\r\n    axis: {\r\n        lineHeight: '17px',\r\n        textColor: '#2d333b',\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#FFF\"\r\n            },\r\n            text: {\r\n                fill: \"#2d333b\",\r\n            }\r\n        },\r\n        legend: {\r\n            text: {\r\n                fontSize: 17\r\n            }\r\n        }\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: '#F3F5F8',\r\n            strokeWidth: 1\r\n        }\r\n    }\r\n};\r\n\r\nexport const SalaryComparisonChart = ({ columnsNames, rowValues, filters }: SalaryComparisonChartProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <DataTableHeader columns={columnsNames} filters={filters}/>\r\n            <ResponsiveBar\r\n                data={rowValues}\r\n                keys={[\"salary\"]}\r\n                indexBy=\"location\"\r\n                theme={theme as any} // TS definition is incomplete for theme\r\n                margin={{ top: 50, right: isMobile ? 20 : 50, bottom: 100, left: isMobile ? 60 : 90 }}\r\n                padding={0.3}\r\n                colors={{ scheme: 'dark2' }}\r\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    tickSize: 0,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Location',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 50,\r\n                    format: (value) => {\r\n                        if (isMobile) {\r\n                            return value === \"Total\" ? \"All\" : (value as string).substring(0, 2);\r\n                        }\r\n\r\n                        return value as string;\r\n                    }\r\n                }}\r\n                enableLabel={!isMobile}\r\n                axisLeft={{\r\n                    tickSize: 3,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Salary, $',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: isMobile ? -50 : -70,\r\n                    format: (value) => isMobile ? `${(value as number) / 1000}k` : value as number\r\n                }}\r\n                animate={false}\r\n                labelFormat={(label) => label.toLocaleString(undefined, { style: \"currency\", currency: \"USD\", maximumFractionDigits: 2 })}\r\n                tooltip={slice => {\r\n                    const isTooltipOfTotalColumn = slice.indexValue === \"Total\";\r\n                    const tooltipText = `Average salary ${isTooltipOfTotalColumn ? \"across the countries\" : \"in \"}`;\r\n                    return (\r\n                        <p className={classes.tooltip}>\r\n                            {tooltipText}{!isTooltipOfTotalColumn ? <strong>{slice.indexValue}</strong> : \"\"}: {slice.value.toLocaleString(\r\n                                undefined, { style: \"currency\", currency: \"USD\", maximumFractionDigits: 2 })} \r\n                        </p>\r\n                    )\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SalaryComparisonChart;"],"sourceRoot":""}